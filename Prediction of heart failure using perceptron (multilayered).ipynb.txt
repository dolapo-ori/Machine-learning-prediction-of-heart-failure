{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "844fe5a8",
   "metadata": {},
   "source": [
    "# Heart Failure Prediction using MultiLayer Perceptron"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c5baf27",
   "metadata": {},
   "source": [
    "### Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fb9f1f88",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1a78ef82",
   "metadata": {},
   "outputs": [],
   "source": [
    "heart_data = pd.read_csv('C:/Users/personal/Documents/datasets/heart.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "04dbe952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>140</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>172</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>F</td>\n",
       "      <td>NAP</td>\n",
       "      <td>160</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>156</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
       "0   40   M           ATA        140          289          0     Normal    172   \n",
       "1   49   F           NAP        160          180          0     Normal    156   \n",
       "\n",
       "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
       "0              N      0.0       Up             0  \n",
       "1              N      1.0     Flat             1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_data.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e9a1ae2",
   "metadata": {},
   "source": [
    "## Insight on column details"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9512c57",
   "metadata": {},
   "source": [
    "### Heart Failure Prediction\n",
    "Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worldwide. \n",
    "Four out of 5CVD deaths are due to heart attacks and strokes, and one-third of these deaths occur prematurely in people under 70 years of age.\n",
    "Heart failure is a common event caused by CVDs and this dataset contains 11 features that can be used to predict a possible heart disease.\n",
    "People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes,\n",
    "hyperlipidaemia or already established disease)need early detection and management wherein a machine learning model can be of great help.\n",
    "\n",
    "### Attribute Information\n",
    "1)Age: age of the patient [years].\n",
    "2)Sex: sex of the patient [M: Male, F: Female].\n",
    "3)ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic].\n",
    "4)RestingBP: resting blood pressure [mm Hg].\n",
    "5)Cholesterol: serum cholesterol [mm/dl].\n",
    "6)FastingBS: fasting blood sugar [1: if FastingBS > 120 mg/dl, 0: otherwise].\n",
    "7)RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality\n",
    "    (T wave inversions and/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria].\n",
    "8)MaxHR: maximum heart rate achieved [Numeric value between 60 and 202].\n",
    "9)ExerciseAngina: exercise-induced angina [Y: Yes, N: No].\n",
    "10)Oldpeak: oldpeak = ST [Numeric value measured in depression].\n",
    "11)ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping].\n",
    "12)HeartDisease: output class [1: heart disease, 0: Normal].                                                 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baa4dac2",
   "metadata": {},
   "source": [
    "## Checking for unique values of categorical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "64cfca5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ATA', 'NAP', 'ASY', 'TA'], dtype=object)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_data[\"ChestPainType\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b4d0a2db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Normal', 'ST', 'LVH'], dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_data[\"RestingECG\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "57ee046e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'Y'], dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_data[\"ExerciseAngina\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad501010",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Up', 'Flat', 'Down'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart_data[\"ST_Slope\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0381b403",
   "metadata": {},
   "source": [
    "### Using a label encoder for the categorical Columns to make them numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b0070343",
   "metadata": {},
   "outputs": [],
   "source": [
    "encoder = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8b54365e",
   "metadata": {},
   "outputs": [],
   "source": [
    "heart_data[\"ChestPainType\"] = encoder.fit_transform(heart_data[\"ChestPainType\"])\n",
    "heart_data[\"RestingECG\"] = encoder.fit_transform(heart_data[\"RestingECG\"])\n",
    "heart_data[\"ExerciseAngina\"] = encoder.fit_transform(heart_data[\"ExerciseAngina\"])\n",
    "heart_data[\"ST_Slope\"] = encoder.fit_transform(heart_data[\"ST_Slope\"])\n",
    "heart_data[\"Sex\"] = encoder.fit_transform(heart_data[\"Sex\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bea3d3c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>140</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>172</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>160</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>156</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Sex  ChestPainType  RestingBP  Cholesterol  FastingBS  RestingECG  \\\n",
       "0   40    1              1        140          289          0           1   \n",
       "1   49    0              2        160          180          0           1   \n",
       "\n",
       "   MaxHR  ExerciseAngina  Oldpeak  ST_Slope  HeartDisease  \n",
       "0    172               0      0.0         2             0  \n",
       "1    156               0      1.0         1             1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# new outlook\n",
    "heart_data.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7487f25",
   "metadata": {},
   "source": [
    "## Visuals for Correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0b06a777",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Using correlation Heatmaps for better visuals\n",
    "vhk = heart_data.corr()\n",
    "plt.figure(figsize = (12, 12))\n",
    "sns.heatmap(vhk,annot=True)\n",
    "plt.title(\"Correlation\", fontsize =20, weight = \"bold\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d302b34",
   "metadata": {},
   "source": [
    "#### Insight from correlation heat map"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "651f9227",
   "metadata": {},
   "source": [
    "From the heat map it is evident that ExerciseAngina has highest correlation to the chance of getting a heart disease, followed by \n",
    "Oldpeak."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3db32a9d",
   "metadata": {},
   "source": [
    "### Using a correlation matrix to check for important features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a2625b04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>1.00</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>0.25</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>0.20</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.26</td>\n",
       "      <td>-0.27</td>\n",
       "      <td>0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0.06</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>0.01</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ChestPainType</th>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>0.21</td>\n",
       "      <td>-0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RestingBP</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.01</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.16</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cholesterol</th>\n",
       "      <td>-0.10</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FastingBS</th>\n",
       "      <td>0.20</td>\n",
       "      <td>0.12</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.09</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.05</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RestingECG</th>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>0.08</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MaxHR</th>\n",
       "      <td>-0.38</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>0.29</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.37</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>0.34</td>\n",
       "      <td>-0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <td>0.22</td>\n",
       "      <td>0.19</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>0.16</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.08</td>\n",
       "      <td>-0.37</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.41</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oldpeak</th>\n",
       "      <td>0.26</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.05</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>0.41</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ST_Slope</th>\n",
       "      <td>-0.27</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>0.21</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.34</td>\n",
       "      <td>-0.43</td>\n",
       "      <td>-0.50</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HeartDisease</th>\n",
       "      <td>0.28</td>\n",
       "      <td>0.31</td>\n",
       "      <td>-0.39</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.06</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.40</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Age   Sex  ChestPainType  RestingBP  Cholesterol  FastingBS  \\\n",
       "Age             1.00  0.06          -0.08       0.25        -0.10       0.20   \n",
       "Sex             0.06  1.00          -0.13       0.01        -0.20       0.12   \n",
       "ChestPainType  -0.08 -0.13           1.00      -0.02         0.07      -0.07   \n",
       "RestingBP       0.25  0.01          -0.02       1.00         0.10       0.07   \n",
       "Cholesterol    -0.10 -0.20           0.07       0.10         1.00      -0.26   \n",
       "FastingBS       0.20  0.12          -0.07       0.07        -0.26       1.00   \n",
       "RestingECG     -0.01  0.07          -0.07       0.02        -0.20       0.09   \n",
       "MaxHR          -0.38 -0.19           0.29      -0.11         0.24      -0.13   \n",
       "ExerciseAngina  0.22  0.19          -0.35       0.16        -0.03       0.06   \n",
       "Oldpeak         0.26  0.11          -0.18       0.16         0.05       0.05   \n",
       "ST_Slope       -0.27 -0.15           0.21      -0.08         0.11      -0.18   \n",
       "HeartDisease    0.28  0.31          -0.39       0.11        -0.23       0.27   \n",
       "\n",
       "                RestingECG  MaxHR  ExerciseAngina  Oldpeak  ST_Slope  \\\n",
       "Age                  -0.01  -0.38            0.22     0.26     -0.27   \n",
       "Sex                   0.07  -0.19            0.19     0.11     -0.15   \n",
       "ChestPainType        -0.07   0.29           -0.35    -0.18      0.21   \n",
       "RestingBP             0.02  -0.11            0.16     0.16     -0.08   \n",
       "Cholesterol          -0.20   0.24           -0.03     0.05      0.11   \n",
       "FastingBS             0.09  -0.13            0.06     0.05     -0.18   \n",
       "RestingECG            1.00  -0.18            0.08    -0.02     -0.01   \n",
       "MaxHR                -0.18   1.00           -0.37    -0.16      0.34   \n",
       "ExerciseAngina        0.08  -0.37            1.00     0.41     -0.43   \n",
       "Oldpeak              -0.02  -0.16            0.41     1.00     -0.50   \n",
       "ST_Slope             -0.01   0.34           -0.43    -0.50      1.00   \n",
       "HeartDisease          0.06  -0.40            0.49     0.40     -0.56   \n",
       "\n",
       "                HeartDisease  \n",
       "Age                     0.28  \n",
       "Sex                     0.31  \n",
       "ChestPainType          -0.39  \n",
       "RestingBP               0.11  \n",
       "Cholesterol            -0.23  \n",
       "FastingBS               0.27  \n",
       "RestingECG              0.06  \n",
       "MaxHR                  -0.40  \n",
       "ExerciseAngina          0.49  \n",
       "Oldpeak                 0.40  \n",
       "ST_Slope               -0.56  \n",
       "HeartDisease            1.00  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_heart_data = heart_data.corr().round(2)\n",
    "corr_heart_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec2216b8",
   "metadata": {},
   "source": [
    "### Feature Selection and Training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bd99179",
   "metadata": {},
   "source": [
    "#### Divide dataset into x and y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ddb0db2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = heart_data.drop(\"HeartDisease\", axis=1)\n",
    "y = heart_data[\"HeartDisease\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2b112a7",
   "metadata": {},
   "source": [
    "### convert y to numpy arrays because the x will be handled with the standard scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cc86cc9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = y.values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b77675ac",
   "metadata": {},
   "source": [
    "## Create a Multilayer Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3c7eb055",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2f269493",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MultiLayerPerceptron(nn.Module):\n",
    "    def __init__(self, input_dim, hidden_dim, output_dim):\n",
    "        super(MultiLayerPerceptron, self). __init__()\n",
    "        self.layer1 = nn.Linear(input_dim, hidden_dim)\n",
    "        self.layer2 = nn.Linear(hidden_dim, hidden_dim)\n",
    "        self.layer3 = nn.Linear(hidden_dim, hidden_dim)\n",
    "        self.layer4 = nn.Linear(hidden_dim, output_dim)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = torch.relu(self.layer1(x))\n",
    "        x = self.layer2(x)\n",
    "        x = self.layer3(x)\n",
    "        x = torch.relu(self.layer4(x))\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f379e0b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3c4e3572",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X, y,test_size=0.25,random_state=46)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "840249e2",
   "metadata": {},
   "source": [
    "#### scale data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e6f2bbf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler().fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "528d839a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_s = scaler.fit_transform(X_train)\n",
    "X_test_s = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "971b70b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_sc = torch.from_numpy(X_train_s).float()\n",
    "y_train = torch.from_numpy(y_train).float()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4de6dac8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sc.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d9210633",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model = MultiLayerPerceptron(input_dim=X_train_sc.shape[1], hidden_dim=31, output_dim=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "75c8e7f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiLayerPerceptron(\n",
       "  (layer1): Linear(in_features=11, out_features=31, bias=True)\n",
       "  (layer2): Linear(in_features=31, out_features=31, bias=True)\n",
       "  (layer3): Linear(in_features=31, out_features=31, bias=True)\n",
       "  (layer4): Linear(in_features=31, out_features=1, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.to(device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d828e91",
   "metadata": {},
   "source": [
    "#### UTILS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "460d8960",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_epochs = 50\n",
    "batch_size = 33\n",
    "num_batches = len(X_train_sc)//batch_size\n",
    "criterion = nn.MSELoss()\n",
    "optimizer = optim.SGD(model.parameters(), lr=0.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a002aaf6",
   "metadata": {},
   "source": [
    "### Training Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a8ec25f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "for epoch in range(num_epochs):\n",
    "    for i in range(num_batches):\n",
    "        #get batch data\n",
    "        batch_x = X_train_sc[i*batch_size:(i + 1)*batch_size]\n",
    "        batch_y = y_train[i*batch_size:(i + 1)*batch_size]\n",
    "        #handling the dimension of the target[32], since the input is [32,1]\n",
    "        batch_y = batch_y.unsqueeze(1)\n",
    "        \n",
    "        #forward pass\n",
    "        outputs = model(batch_x)\n",
    "        #compute loss\n",
    "        loss = criterion(outputs, batch_y)\n",
    "        \n",
    "        #backward\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        \n",
    "        #gradient descent\n",
    "        optimizer.step()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e61db32b",
   "metadata": {},
   "source": [
    "### Testing Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "09784b89",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_sc = torch.from_numpy(X_test_s).float()\n",
    "y_test = torch.from_numpy(y_test).float()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5231e57d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiLayerPerceptron(\n",
       "  (layer1): Linear(in_features=11, out_features=31, bias=True)\n",
       "  (layer2): Linear(in_features=31, out_features=31, bias=True)\n",
       "  (layer3): Linear(in_features=31, out_features=31, bias=True)\n",
       "  (layer4): Linear(in_features=31, out_features=1, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# EVALUATE\n",
    "model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3110f730",
   "metadata": {},
   "outputs": [],
   "source": [
    "#handling the target(y_test) dimension again\n",
    "y_test = y_test.unsqueeze(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5fbc3328",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set: Average loss: 0.1344 || Accuracy: 0.8304\n"
     ]
    }
   ],
   "source": [
    "test_loss = 0.0\n",
    "correct = 0\n",
    "total = 0\n",
    "with torch.no_grad():\n",
    "    outputs = model(X_test_sc).to(device)\n",
    "    loss = criterion(outputs, y_test).to(device)\n",
    "    \n",
    "    test_loss += loss.item() * X_test_sc.size(0)\n",
    "    pred = torch.round(outputs)\n",
    "    correct += (pred == y_test).sum().item()\n",
    "    total += X_test_sc.size(0)\n",
    "    \n",
    "avg_loss = test_loss / total\n",
    "accuracy = correct / total\n",
    "print('Test set: Average loss: {:.4f} || Accuracy: {:.4f}'.format(avg_loss, accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13038824",
   "metadata": {},
   "source": [
    "## Points to note"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84fdf470",
   "metadata": {},
   "source": [
    "The hyperparameters that can affect the performance of a Multi layer perceptron includes:\n",
    "- number of hidden layers\n",
    "- number of neurons in each layer\n",
    "- learning rate\n",
    "- activation function\n",
    "- batch size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9154cb82",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
